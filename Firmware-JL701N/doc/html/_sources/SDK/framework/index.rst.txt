技术框架
==================

通过jlstudio发布的耳机，音箱等SDK技术框架如下图所示，从下到上依次为: 系统层、中间层、应用层。
不同的产品形态主要区别在应用层，中间层和系统层是共用的，只是模块数量会有区别。

.. figure:: ./framework.png


系统层
---------

OS
   1. 针对不同系列芯片使用的操作系统可能不同，OS API抽象层通过屏蔽系统差异，对上层提供统一的API
   2. 支持任务管理、信号量、互斥量、TaskQueue等基础功能。

硬件驱动
   1.  考虑代码大小问题，硬件驱动部分没有做统一的管理框架，直接提供裸的API。

中间层
-----------

蓝牙协议栈
   1. 协议栈采用分层设计，底层是controller和TWS协议，上层是标准协议栈。
   2. 支持百度、小米、酷狗、天猫精灵等第三方协议


音频系统
   1. 音频系统采用分层设计，底层是音效算法，中间层是音频框架，上层是封装好的各种场景下的播放器和录音器集合。
   2. 应用层通过播放器和录音器提供的API开启/关闭音频流，不同方案提供的播放器和录音器数量会有不同。
   3. 配合jlstudio，可以实现音频流程图的编辑、在线调音等功能。


文件系统
   1. ResFile文件系统提供对存放在flash中的资源文件读取能力，不支持写入。
   2. VM提供程序运行过程中存储少量数据到flash中的能力
   3. FatFS提供对SD卡、U盘、Nandflash等大容量设备的读写能力
   4. 虚拟文件系统接口层通过屏蔽文件系统差异，对上层提供支持类posix的文件读写接口


设备管理模块
   1. 主要功能为管理SD卡、U盘等大容量设备。处理设备上线下事件，挂载设备到虚拟文件系统。
   2. 通过文件系统API对磁盘内的文件进行扫描排序，为播放器提供打开音频文件能力。
      

Scene Manager
   1. 情景配置文件解析模块
      

APP Manager
   1. 应用层模式切换管理模块
      
Key Driver
   1. 按键驱动模块，只提供单击、长按、hold、抬起等基础事件，多击、组合按键等特殊事件由各方案自己转换。 
     
Log
   1. 系统调试模块，提供不同等级log输出能力, 关闭串口调试功能后，所有的log输出代码会被编译器优化掉。
     

应用层
------------

应用层将不同的功能封装成一个个模式，每个模式可以有自己的消息映射表，模式的注册、切换和返回都是通过APP_Manager模块来管理。
不同方案不仅是模式的数量有所区别，模式的代码也是针对方案做的定制化开发，目的是为了简化应用层的逻辑，提高代码的可读性。
配置项管理
##############

配置项管理模块， 负责为用户访问不同特性的系统配置项， 提供统一接口，系统配置项管理区域列举如下：

都不可以在中断中进行使用

VM区域：
--------------------

   - 特性：可读可写， 同一个配置可多次写入， 读出以最后写入的数据为有效值
   - 空间大小定义：在下载目录 isd_config.ini 文件通过配置[RESERVED_CONFIG]的VM_LEN 定义大小， 该变量实际为让工具分配的最小 VM 大小， 实际上最终 VM 大小为大于等于 VM_LEN， 大于 VM_LEN 部分为 flash剩余空间。


VM配置项暂存RAM功能描述：
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #. 针对于对vm操作flash会打断os系统操作的时间敏感的应用场景而设计的功能，通过把vm配置项暂存到ram的方式来避免操作flash带来的长延时。
    #. 开启该功能之后不需要-format_all全擦flash，会按照读优先级继承原来的flash的配置项内容。

- 开启方法：
  
#. lib_driver_config.c把vm_ram_storage_enable=1。

- 特性：

#. ram空间使用链表结构进行管理，使用过程中需要消耗堆内存空间。

- 读接口：

#. 存在读内容优先级：ram > flash

#. 先轮询ram内是否存在配置项，有则读取并返回长度。
#. ram内没有配置项，则轮询flash是否存在配置项，有则读取并返回长度，无则返回错误码。


- 写接口：
  
#. 每次调用syscfg_write()接口都是写到ram里面，直到调用vm_flush2flash()接口才会刷新缓存到flash。
#. 如果同一个配置项写入所需的长度与上一次的写入长度不相等，则会重新申请堆空间进行存放。

- 注意事项：
  
#. 存储到ram掉电后是会丢失数据的，存储到flash则可以掉电保存数据，因此在关机前和升级前需要注意好保存配置项信息，调用一次vm_flush2flash()接口来刷新缓存到flash。
#. 目前sdk默认关机，升级前会调用一次vm_flush2flash()接口来刷新缓存到flash，用户可根据需求进行开关该功能。切模式处则预留了接口，可根据具体需求选择性开启。
#. 调用vm_flush2flash()接口刷新缓存到flash的时间不固定，因为过程中可能会触发flash的整理机制，导致操作时间延长。
#. 如果缓存到ram区域的VM配置项内容总大小超过了vm_ram_storage_limit_data_total_size，则会打印vm_ram_data_used_size > limit_size发出警告,但不会触发vm区域整理，需要手动调用vm_flush2flash()接口来刷新缓存到flash。


BTIF区域：
----------------------------

   - 特性：可读可写， 同一个配置只能写一次， 读出以第一次写入的值为有效值
   - 空间大小定义：在下载目录 isd_config.ini 文件通过配置[RESERVED_CONFIG]的BTIF_LEN 定义大小。

cfg_tool.bin 配置文件区域：
----------------------------

    - 特性：只读， 所存配置项来自配置工具生成的 cfg_tool.bin 文件
    - 空间大小定义：由配置工具生成， 作为资源文件烧写到 flash， 大小在不同项目中由配置项数目和大小决定

模块每个配置项分配唯一的 ID 号， ID 号定义在 SDK 两个文件中：

- syscfg_id.h： 存放系统占用的配置项， 不可删除；
- user_cfg_id.h： 存放用户自定义配置项， 用户可通过实际应用增加和删除；

配置项 ID 号分配情况如下：

1. 1 ~ 99 只存放 VM 区域
#. 100 ~ 511 可存放在 VM 区域， BTIF 区域和 cfg_tool.bin 区域
#. 512 ~ 700 只存放 cfg_tool.bin 配置文件区域


syscfg_read
~~~~~~~~~~~~~~~~~~~~

- 函数原型：

    .. code-block:: c

        int syscfg_read(u16 item_id, void *buf, u16 len)

- 功能说明：读取一个配置项数据
- 参数说明：

    =========================  ========================================================================================================================================================
      参数                      说明
      item_id                   配置项 ID 号
      buf                       用于读取数据的 buf
      len                       用于读取数据的 buf的长度
    =========================  ========================================================================================================================================================
    

- 返回值：

    =========================  ============================================================================================
       > 0                       读取成功
       <= 0                      读取出错
    =========================  ============================================================================================



- 示例：

    .. code-block:: c
        :linenos:

        int ret = 0;
        u8 mac_buf[6];
        ret = syscfg_read(CFG_BT_MAC_ADDR, mac_buf, 6);
        if (ret == 6) {
            printf(“read config succ”);
        } else {
            printf(“read config fail, ret = %d”, ret);
        }

syscfg_read_string
~~~~~~~~~~~~~~~~~~~~

- 函数原型：

    .. code-block:: c

        int syscfg_read_string(u16 item_id, void *buf, u16 len, u8 ver)

- 功能说明：读取存放在 cfg_tool.bin 中一个配置存放多份的数据， 读取其中一份
- 参数说明：

    =========================  ========================================================================================================================================================
      参数                      说明
      item_id                   配置项 ID 号
      buf                       用于读取数据的 buf
      len                       用于读取数据的 buf的长度
      ver                       第 ver 份数据
    =========================  ========================================================================================================================================================
    

- 返回值：

    =========================  ============================================================================================
       > 0                       读取成功
       <= 0                      读取出错
    =========================  ============================================================================================



- 示例：

    .. code-block:: c
        :linenos:

        int ret = 0;
        u8 bt_name[32]；
        ret = syscfg_read_string(CFG_BT_NAME, bt_name, 32);
        if (ret == 32) {
            printf(“read config succ”);
        } else {
            printf(“read config fail, ret = %d”, ret);
        }



syscfg_ptr_read
~~~~~~~~~~~~~~~~~~~~

- 函数原型：

    .. code-block:: c

        u8 *syscfg_ptr_read(u16 item_id, u16 *len)

- 功能说明：读取一个存放在 cfg_tool.bin 区域的配置项， 不需要读取 buf， 返回数据存放指针
- 参数说明：

    =========================  ========================================================================================================================================================
      参数                      说明
      item_id                   配置项 ID 号
      len                       返回读取到数据的长度
    =========================  ========================================================================================================================================================
    

- 返回值：

    =========================  ============================================================================================
       非NULL                    数据存放地址指针
       NULL                      数据读取失败
    =========================  ============================================================================================

- 示例：

    .. code-block:: c
        :linenos:

        int ret = 0;
        u8 *anc_cfg = NULL;
        u16 len;
        anc_cfg = syscfg_ptr_read(CFG_ANC_INFO, &len);
        if (anc_cfg != NULL) {
            printf(“read config succ”);
            put_buf(anc_cfg, len);
        } else {
            printf(“read config fail”);
        }


syscfg_write
~~~~~~~~~~~~~~~~~~~~

- 函数原型：

    .. code-block:: c

        int syscfg_write(u16 item_id, void *buf, u16 len)

- 功能说明：写入一个配置项数据
- 参数说明：

    =========================  ========================================================================================================================================================
      参数                      说明
      item_id                   配置项 ID 号
      buf                       用于写入数据的 buf
      len                       用于写入数据的 buf的长度
    =========================  ========================================================================================================================================================
    

- 返回值：

    =========================  ============================================================================================
       > 0                       写入成功
       <= 0                      写入出错
    =========================  ============================================================================================



- 示例：

    .. code-block:: c
        :linenos:

        int ret = 0;
        u8 mac_buf[6] = {1, 2, 3, 4, 5, 6};
        ret = syscfg_write(CFG_BT_MAC_ADDR, mac_buf, 6);
        if (ret == 6) {
            printf(“write config succ”);
        } else {
            printf(“write config fail, ret = %d”, ret);
        }


syscfg_dma_write
~~~~~~~~~~~~~~~~~~~~

- 函数原型：

    .. code-block:: c

        int syscfg_dma_write(u16 item_id, void *buf, u16 len)

- 功能说明：以 dma 方式写入一个配置项数据
- 参数说明：

    =========================  ========================================================================================================================================================
      参数                      说明
      item_id                   配置项 ID 号
      buf                       用于写入数据的 buf，buf 要求 4 字节对齐
      len                       用于写入数据的 buf的长度
    =========================  ========================================================================================================================================================
    

- 返回值：

    =========================  ============================================================================================
       > 0                       写入成功
       <= 0                      写入出错
    =========================  ============================================================================================



- 示例：

    .. code-block:: c
        :linenos:

        int ret = 0;
        u8 wbuf[256]；
        memset(mac_buf, 0x5A, sizeof(wbuf))；
        ret = syscfg_dma_write(CFG_FLASH_BREAKPOINT0, wbuf, sizeof(wbuf));
        if (ret == sizeof(wbuf)) {
            printf(“write config succ”);
        } else {
            printf(“write config fail, ret = %d”, ret);
        }





